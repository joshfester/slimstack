####################################################################################################
#### author: SlickStack ############################################################################
#### link: https://slickstack.io ###################################################################
#### mirror: https://mirrors.slickstack.io/modules/nginx/sites/production.txt ######################
#### path: n/a (boilerplate) #######################################################################
#### destination: /var/www/sites/production (after install) ########################################
#### purpose: Nginx server block boilerplate optimized for SlickStack production sites #############
#### module version: Nginx 1.18.x ##################################################################
#### sourced by: nginx.conf ########################################################################
#### bash aliases: n/a (ss-install-nginx-config) ###################################################
####################################################################################################

## SLICKSTACK SUPPORTS HTTPS-ONLY NGINX SERVER BLOCKS WITH HSTS ENABLED BY DEFAULT ##
## PRODUCTION, STAGING, AND DEV SITES EACH HAVE SEPARATE NGINX SERVER BLOCKS ##

####################################################################################################
#### TABLE OF CONTENTS (Server Block: Production) ##################################################
####################################################################################################

## this is a brief summary of the different code snippets you will find in this script ##
## each section should be commented so you understand what is being accomplished ##

## A. Catch-All Redirect To Canonical Domain
## B. Canonical Domain (Single Website)
## C. Well-Known (Domain Verification)
## D. Redirect Any AMP Requests
## E. Redirect Junk URLs

## E. Noindex Thin Content (Regex)
## E. Noindex Certain File Types
## F. FastCGI Cache Settings
## G. PHP-FPM Routing
## H. WP-Login (Rate Limiting)
## I. Adminer Settings
## J. Redirect Staging/Dev Subdirectories
## K. Static Resource Expiration
## L. Browser Rendering Settings
## M. Favicon Settings
## N. Robots.txt Settings
## O. Ads.txt Settings
## P. Git Configuration
## Q. Deny Access To Unsafe WordPress Files
## R. Deny Access To Unsafe SlickStack Files

####################################################################################################
#### A. Server Block (Production): Catch-All Redirect To Canonical Domain ##########################
####################################################################################################

## here we force redirect any non-canonical requests to the canonical server block below ##
## this vastly improves security, prevents IP snooping, SEO problems, and beyond ##

server {
	listen 80 default_server;
	listen 443 ssl default_server;
	listen [::]:80 default_server;
	listen [::]:443 ssl default_server;
	server_name _;
	return 301 https://@SITE_DOMAIN$request_uri;
}

#### for Certbot only ##
server {
    listen 80;
	listen [::]:80;
    server_name @SITE_DOMAIN_INCLUDING_WWW @SITE_DOMAIN_EXCLUDING_WWW;
	return 301 https://@SITE_DOMAIN$request_uri;
}

####################################################################################################
#### B. Server Block (Production): Canonical Domain (Single Website) ###############################
####################################################################################################

## CloudFlare ignores HTTP/2 from origin server but we enable in case of Lets Encrypt ##
## because SlickStack is HTTPS-only the canonical block is port 443 (SSL) only ##

server {
	listen 443 ssl http2;
	listen [::]:443 ssl http2;
	server_name @SITE_DOMAIN;
	root @PROJECT_ROOT;
	
	## redirect any requests that do not match server blocks ##
	if ($http_host !~ "@SITE_DOMAIN|staging.@SITE_DOMAIN_EXCLUDING_WWW") {
	return 301        https://@SITE_DOMAIN$request_uri;
}
	
####################################################################################################
#### C. Server Block (Production): Well-Known (Domain Verification) ################################
####################################################################################################

## the well-known hidden directory is becoming more important for domain verification ##
## we implement an abundance of rules to improve functionality and stability ##

location ^~ /.well-known/ {
	allow all;
	auth_basic off;
	default_type "text/plain";
	try_files $uri =404;
}
    
####################################################################################################
#### D. Server Block (Production): Redirect Any AMP Requests #######################################
####################################################################################################

## this powerful snippet will redirect all the messy URLs created by AMP software ##
## SlickStack does not support AMP for both stability and political reasons ##

## redirect /amp queries ##
rewrite ^(.*/)amp(.*)$ $1 permanent;
	
## redirect ?amp queries ##
if ($query_string ~ "^amp(.*)$") {
	rewrite ^(.*)$ $uri? permanent;
}

####################################################################################################
#### D. Server Block (Production): Redirect Other Junk Query Strings #######################################
####################################################################################################

## redirect ?format queries ##
if ($query_string ~ "^format(.*)$") {
        rewrite ^(.*)$ $uri? permanent;
}

## redirect ?lightbox queries ##
if ($query_string ~ "^lightbox(.*)$") {
        rewrite ^(.*)$ $uri? permanent;
}

## noindex ?s= queries ##
## this addresses an apparent bug in WP core / WooCommerce where complex search queries are missing the noindex metatag ##
## e.g. /?s=shirt&post_type=product is missing it causing mass amount of GSC errors like: Duplicate without user-selected canonical ##

if ($query_string ~ "^s=(.*)$") {
        set $robots "noindex, nofollow, nosnippet, noarchive";
}

####################################################################################################
#### E. Server Block (Production): Redirect Junk URLs ##############################################
####################################################################################################

## redirect /home/ ##
rewrite ^/home/?$ $1 permanent;

## trackback ##
rewrite ^(.*)/trackback/?$ $1 permanent;

## send to parent /feed/ ##
rewrite ^/(.*)/atom/?$ /$1 permanent;

## send to parent /feed/ ##
rewrite ^/(.*)/rss2/?$ /$1 permanent;

## comments feeds base ##
rewrite ^(.*/)comments/?$ $1 permanent;

## feed (preserve master feed) ##
location = /feed/?$ {
        try_files $uri $uri/ /index.php?$args;
        set $robots "noindex, nofollow, nosnippet, noarchive";
}

## redirect feeds besides bbpress topics feed ##
## needs better optimization as currently this preserves page feeds with slugs that begin with /topics... ##
location ~ ^/(?!topics).*/feed/?$ {
        rewrite ^/(.*)/feed/?$ /$1 permanent;
}

####################################################################################################
#### Server Block (Production): Root Location Block ################################################
####################################################################################################

## below is the main location block that applies to pretty much the entire website ##
## this includes site-wide rules for security, maintenance, and other purposes ##

## force trailing slash on */wp-admin requests ##
rewrite /wp-admin$ https://$host$uri/ permanent;
		
location / {

## first try files, then directories, otherwise query index.php ##
try_files $uri $uri/ /index.php?$args;
	
## THIS SNIPPET IS BREAKING TRACKING QUERIES SUCH AS /?ref=google&utm_source= ##
## redirect index.php to root ##
# if ($request_uri ~* "^(.*/)index\.php$") {
#	return 301 $1;
# }

## 503 error if maintenance file found in web root ##
if (-f /var/www/html/maintenance.html) {
	return 503;
}
	
## force trailing slashes on urls (do not enable for bbPress/BuddyPress sites) ##
# rewrite ^([^.]*[^/])$ $1/ permanent;
	
## block user enumeration ##
if ( $query_string ~ "author=([0-9]*)" ) { 
	return 403;
}

}

####################################################################################################
#### E. Server Block (Production): Noindex Thin Content (Regex) ####################################
####################################################################################################

## these are very powerful rules that force-noindex thin content for huge SEO results ##
## in this way your clients, plugins, or WP themes cannot mess up your indexing ##

## pagination ##
location ~ ^(.*)/page/(.*)/$ {
	try_files $uri $uri/ /index.php?$args;
	set $robots "noindex, nofollow, nosnippet, noarchive";
}

## tags ##
location ~ ^(.*)/tag/(.*)/$ {
	try_files $uri $uri/ /index.php?$args;
	set $robots "noindex, nofollow, nosnippet, noarchive";
}

## date archives ##
location ~ "^(.*)/[0-9]{4}/([0-9]{2}/)?([0-9]{2}/)?$" {
	try_files $uri $uri/ /index.php?$args;
	set $robots "noindex, nofollow, nosnippet, noarchive";
}

## embed subdirs (bbpress) ##
location ~ ^(.*)/embed/$ {
	try_files $uri $uri/ /index.php?$args;
	set $robots "noindex, nofollow, nosnippet, noarchive";
}

## reply sublinks (bbpress) ##
location ~ ^(.*)/reply/$ {
	try_files $uri $uri/ /index.php?$args;
	set $robots "noindex, nofollow, nosnippet, noarchive";
}

####################################################################################################
#### E. Server Block (Production): Noindex Certain File Types ######################################
####################################################################################################

## these powerful rules force-noindex non-WordPress file types for cleaner SEO results ##
## in this way malware or spam attacks or forgotten files are hidden from SERPs ##

## allowed: htm, html, xml (also css, js, php, etc)
## Ref: https://support.google.com/webmasters/answer/35287?hl=en

location ~* \.(asp|aspx|doc|docx|dwf|gpx|hwp|jsp|kml|kmz|log|odp|ods|odt|pdf|ppt|pptx|ps|rtf|tex|text|txt|wap|wml|xls|xlsx)$ {
	set $robots "noindex, nofollow, nosnippet, noarchive";
}

####################################################################################################

####################################################################################################

    ## fixes potential 403 denied issues with WP-JSON ##
    location ~ ^/wp-json/ {
        ## if permalinks not enabled or not loaded properly in the browser ##
        rewrite ^/wp-json/(.*?)$ /?rest_route=/$1 last;
    }
	
####################################################################################################
#### F. Server Block (Production): FastCGI Cache Settings ##########################################
####################################################################################################

## several common patterns are configured to skip FastCGI caching to avoid conflicts ##
## ensure your site uses correct URL spellings e.g. /cart and /checkout (etc) ##

    ## set to either 1/0 to skip fastcgi cache by default ##
    set $skip_cache 0;
    
    ## post requests should always skip the cache
    if ($request_method = POST) {
        set $skip_cache 1;
    }
    
    ## query strings should always skip the cache
    if ($query_string != "") {
        set $skip_cache 1;
    }
    
    ## ENGLISH - sensitive wordpress urls should always skip the cache
    if ($request_uri ~* "index.php|/account.*|/cart.*|/checkout.*|/contact.*|/dashboard.*|/login.*|/my-.*|/order.*|/profile.*|/register.*|/settings.*|/view.*|/wc-api.*|/wp-admin.*|wp-.*.php") {
        set $skip_cache 1;
    }

    ## GERMAN - sensitive wordpress urls should always skip the cache
    if ($request_uri ~* "index.php|/konto.*|/warenkorb.*|/kasse.*|/kontakt.*|/dashboard.*|/anmelden.*|/mein-.*|/bestellung.*|/profil.*|/registrieren.*|/einstellungen.*|/view.*|/wc-api.*|/wp-admin.*|wp-.*.php") {
        set $skip_cache 1;
    }
    
    ## POLISH - sensitive wordpress urls should always skip the cache
    if ($request_uri ~* "index.php|/konto.*|/koszyk.*|/zamowienie.*|/kontakt.*|/dashboard.*|/login.*|/moje-.*|/zamowienie.*|/profil.*|/register.*|/ustawienia.*|/view.*|/wc-api.*|/wp-admin.*|wp-.*.php") {
    	set $skip_cache 1;
    }

    ## do not cache RSS feeds or sitemaps (special 5 minute cache rule or something would be better in the future) ##
    if ($request_uri ~* "/feed/|sitemap(_index)?.xml") {
        set $skip_cache 1;
    }
    
    ## certain cookies (logged in users or recent commenters etc) should always skip the cache
    if ($http_cookie ~* "wordpress_logged_in|wp-postpass|woocommerce_items_in_cart|woocommerce_cart_hash|comment_author") {
        set $skip_cache 1;
    }
    
    ## woocommerce cart actions should always skip the cache
    # if ($arg_add-to-cart != "") {
    #    set $skip_cache 1;
    # }
    
    ## woocommerce shoppers should always skip the cache
    # if ($http_cookie ~* "cookie_woocommerce_items_in_cart") {
    #    set $skip_cache 1;
    # }
    
    ## woocommerce shoppers should always skip the cache
    # if ($cookie_woocommerce_items_in_cart != "0") {
    #    set $skip_cache 1;
    # }

####################################################################################################
#### G. Server Block (Production): PHP-FPM Routing #################################################
####################################################################################################

## here are the critical settings that allow Nginx and PHP to work together via FCGI ##
## we also have to optimize cookies here too since working with WordPress ##

location ~* \.php$ {
set $rt_session "";
if ($http_cookie ~* "wp_woocommerce_session_[^=]*=([^%]+)%7C") {
	set $rt_session wp_woocommerce_session_$1;
}
if ($skip_cache = 0 ) {
	more_clear_headers "Set-Cookie*";
	set $rt_session "";
}
include /etc/nginx/fastcgi.conf;
try_files $uri $uri/ /index.php?$args; ## send .php requests to WordPress if not found
fastcgi_split_path_info ^(.+\.php)(/.+)$;
fastcgi_pass 127.0.0.1:9000;
fastcgi_read_timeout 300;
fastcgi_index index.php;
fastcgi_cache WORDPRESS;
fastcgi_cache_valid 200 301 404;
fastcgi_cache_bypass $skip_cache;
fastcgi_no_cache $skip_cache;

more_set_headers "X-Robots-Tag $robots";
set $cachecontrol "nocache"; ## disable browser caching for dynamic pages

## set-cookie on PHP content ##
set $setcookie "Path=/; HttpOnly; Secure";
}
	
####################################################################################################
#### H. Server Block (Production): Rate Limit WP-Login.php #########################################
####################################################################################################

## because of goofy Nginx we must reinclude all PHP directives here as they exist above ##
## next we enable rate-limiting to prevent automated brute force hack attempts ##

location = /wp-login.php {
	include /etc/nginx/fastcgi.conf;
	try_files $uri =404;
	fastcgi_split_path_info ^(.+\.php)(/.+)$;
	fastcgi_pass 127.0.0.1:9000;
	fastcgi_read_timeout 300;
	fastcgi_index index.php;
	fastcgi_cache WORDPRESS;
	fastcgi_cache_valid 200 301 404;
	fastcgi_cache_bypass $skip_cache;
	fastcgi_no_cache $skip_cache;
	limit_req zone=wplogin burst=1 nodelay;
}

####################################################################################################
#### K. Server Block (Production): HTML Files ######################################################
####################################################################################################

## because some websites mix WordPress with other static .html files we include this ##
## in case .html files are missing they will be redirected to WordPress here ##

location ~* \.(htm|html)$ {
	try_files $uri $uri/ /index.php?$args;
	set $cachecontrol "public, max-age=691200"; ## 1 week
	set $setcookie "";
}

####################################################################################################
#### K. Server Block (Production): Static Files ####################################################
####################################################################################################

## this snippet controls expiration headers and any other settings for static assets ##
## keep in mind that Cloudflare or CDNs will likely overwrite these settings ##

location ~* \.(atom|bmp|bz2|css|doc|docx|eot|gif|gz|ico|jpeg|jpg|js|mid|midi|mp4|ogg|ogv|otf|png|ppt|rar|rss|rtf|svg|svgz|tar|tgz|ttc|ttf|wav|webp|woff|woff2|xls|zip)$ {
	set $cachecontrol "public, max-age=15778476"; ## 6 months
	set $setcookie "";
}

####################################################################################################
#### L. Server Block (Production): Browser Asset Rendering #########################################
####################################################################################################

## avoids render security errors for cross-origin in certain browsers e.g. Firefox/IE ##
## this pretty much tells browsers to stop being paranoid and load your fonts ##

location ~* \.(css|eot|js|otf|svg|ttc|ttf|woff|woff2)$ {
	add_header Access-Control-Allow-Origin "*";
}

####################################################################################################
#### M. Server Block (Production): Favicon Files ###################################################
####################################################################################################

## the favicon file is annoying and old-fashioned but still something we must optimize ##
## issuing a 204 error is better (and faster) than a 404 error if not found ##

location = /favicon.ico {
	try_files $uri =204;
}
    
####################################################################################################
#### N. Server Block (Production): Physical or Virtual Robots.txt ##################################
####################################################################################################

## messing up robots.txt rules is one of the most common issues with WordPress sites ##
## in most cases it should be near-empty (noindex meta tags usually better) ##

location = /robots.txt {
	try_files $uri $uri/ /index.php?$args;
	allow all;
}

####################################################################################################
#### O. Server Block (Production): Physical or Virtual Ads.txt #####################################
####################################################################################################

## just like robots.txt the ads.txt file can be generated using WordPress plugins ##
## virtual ones can be easier to manage/migrate but also more code bloat ##

location = /ads.txt {
	try_files $uri $uri/ /index.php?$args;
	allow all;
}

####################################################################################################
#### P. Server Block (Production): Git Configuration ###############################################
####################################################################################################

    location = /.git/config {
        deny all;
    }
    
####################################################################################################
#### Q. Server Block (Production): Deny Access To Unsafe WordPress Files ###########################
####################################################################################################

    ## WP directories ##
    location ~* /(?:wp-includes|wp-content|mu-plugins|uploads)/.*\.php$ {
        deny all;
    }
    
    ## WP meta files ##
    location ~* (license|licence|readme)\.(htm|html|txt) {
	deny all;
    }
    
    ## wp-admin concatenation ##
    location = /wp-admin/load-scripts.php {
        deny all;
    }
    
    ## wp-admin concatenation ##
    location = /wp-admin/load-styles.php {
        deny all;
    }
    
    ## wp-config ##
    location ~ /wp-config*.php {
	deny all;
    }
    
    ## XML-RPC ##
    location = /xmlrpc.php {
	deny all;
    }
    
    ## wp-mail ##
    location = /wp-mail.php {
	deny all;
    }
    
    ## wp-links-opml ##
    location = /wp-links-opml.php {
	deny all;
    }
    
    ## wp-trackback ##
    location = /wp-trackback.php {
	deny all;
    }
    
    ## WP debug logs ##
    location ~ /wp-content/debug\.log {
	deny all;
    }
    
####################################################################################################
#### R. Server Block (Production): Deny Access To Unsafe SlickStack Files ##########################
####################################################################################################

## here we deny frontend access to certain sensitive files that are part of SlickStack ##
## this provides extra security and prevents snooping into your configuration ##

    ## object-cache.php ##
    location = /wp-content/object-cache.php {
		deny all;
    }
    
####################################################################################################
#### Server Block (Production): Deny Access To WordPress Installer #################################
####################################################################################################
    
## SlickStack blocks access to the staging WordPress installer to avoid hacking etc ##
## staging sites should populate their data using ss-sync-staging only ##
    
    ## block install script ##
    location = /wp-admin/install.php {
    	deny all;
    }
    
####################################################################################################
#### Server Block: Custom Settings For Popular Third-Party WordPress Plugins #######################
####################################################################################################
    
    ## Easy Digital Downloads ##
    location ~ ^/wp-content/uploads/edd/(.*?)\.zip$ {
        rewrite / permanent;
    }
    
    ## more coming soon... ##
    
####################################################################################################
#### Server Block (Production): Maintenance File (Named Location) ##################################
####################################################################################################

  ## activate named @maintenance location for any 503 errors ##
  error_page 503 @maintenance;
  
  ## location rules for maintenance.html ##
  location @maintenance {
       rewrite ^(.*)$ /maintenance.html break;
  }
  
  
  



####################################################################################################
#### Server Block (Production): #######################
####################################################################################################
    
## DO NOT REMOVE THIS CURLY BRACKET ᕦ⊙෴⊙ᕤ ##
}

####################################################################################################
#### SlickStack: External References Used To Improve This Script (Thanks, Interwebz) ###############
####################################################################################################

## Ref: https://nginx.viraptor.info
## Ref: https://unix.stackexchange.com/questions/91774/performance-of-unix-sockets-vs-tcp-ports
## Ref: https://stackoverflow.com/questions/257433/postgresql-unix-domain-sockets-vs-tcp-sockets/257479
## Ref: https://stackoverflow.com/questions/42704763/what-are-the-differences-from-running-php-fpm-over-an-unix-socket-vs-a-tcp-ip-so
## Ref: https://www.lowendtalk.com/discussion/7289/nginx-php-fpm-unix-socket-or-tcp-ip-for-fastcgi-pass
## Ref: https://blog.tylerbuchea.com/nginx-lets-encrypt-certbot-manual-installation/
## Ref: https://ncona.com/2017/01/free-https-with-lets-encrypt/
## Ref: https://certbot.eff.org/docs/using.html
## Ref: https://advancedweb.hu/2018/06/05/letsencrypt_webroot_vs_standalone/
## Ref: https://wp-staging.com/docs/activate-permalinks-staging-site/
## Ref: https://stackoverflow.com/questions/21687288/nginx-redirect-loop-remove-index-php-from-url/21813759#21813759
## Ref: https://serversforhackers.com/c/php-fpm-configuration-the-listen-directive
## Ref: https://easyengine.io/tutorials/php/fpm-sysctl-tweaking/
## Ref: https://support.cloudflare.com/hc/en-us/articles/214534978-Are-the-HTTP-2-or-SPDY-protocols-supported-between-Cloudflare-and-the-origin-server-
## Ref: https://blog.cloudflare.com/experiment-with-http-3-using-nginx-and-quiche/
## Ref: https://blog.cloudflare.com/http-2-prioritization-with-nginx/
## Ref: https://wordpress.org/support/topic/contact-form-7-wp-json-404-error/
## Ref: https://wordpress.stackexchange.com/questions/306033/rewrite-rest-route-link-to-wp-json-without-changing-default-permalink-stru
## Ref: https://stackoverflow.com/questions/30379940/how-do-i-get-the-wordpress-json-api-to-work-on-nginx-server
## Ref: https://community.letsencrypt.org/t/letsencrypt-webroot-verification-follows-http-to-https-redirect-for-self-signed-cert/19917
## Ref: https://letsencrypt.org/docs/challenge-types/
## Ref: https://www.techcoil.com/blog/understanding-the-difference-between-the-root-and-alias-directives-in-nginx/
## Ref: https://serverfault.com/questions/397421/phpmyadmin-location-for-nginx
## Ref: https://serverfault.com/questions/748634/how-to-alias-directories-in-nginx
## Ref: https://stackoverflow.com/questions/35320674/how-can-i-have-same-rule-for-two-locations-in-nginx-config
## Ref: https://stackoverflow.com/questions/22224441/nginx-redirect-all-requests-from-subdirectory-to-another-subdirectory-root
## Ref: https://www.digitalocean.com/community/questions/redirect-any-and-all-traffic-to-a-folder-to-another-url
## Ref: https://stackoverflow.com/questions/10631933/nginx-static-file-serving-confusion-with-root-alias
## Ref: https://www.peterbe.com/plog/be-very-careful-with-your-add_header-in-nginx
## Ref: https://www.digitalocean.com/community/tutorials/understanding-nginx-server-and-location-block-selection-algorithms
## Ref: https://www.keycdn.com/support/nginx-location-directive
## Ref: https://community.easyengine.io/t/caching-of-feeds/868
## Ref: https://www.nginx.com/resources/wiki/start/topics/depth/ifisevil/
## Ref: https://serverfault.com/questions/857787/how-to-if-else-statement-with-nginx-conf
## Ref: https://stackoverflow.com/questions/29756330/how-can-i-use-an-or-operator-in-an-nginx-if-statement
## Ref: http://nginx.org/en/docs/http/ngx_http_rewrite_module.html
## Ref: https://www.bjornjohansen.com/load-scripts-php
## Ref: https://codinginthetrenches.com/2013/12/14/nginx-ipv6only-setting-gotcha/
## Ref: https://stefan.lengfeld.xyz/blog/2015_01_21/Using%20ipv6only%20in%20Nginx.xhtml
## Ref: https://serverfault.com/questions/638367/do-you-need-separate-ipv4-and-ipv6-listen-directives-in-nginx
## Ref: https://blog.devcloud.hosting/configuring-nginx-for-quickly-switching-to-maintenance-mode-e4136cf497f3
## Ref: https://blog.danivovich.com/2016/09/08/flexible-maintenance-mode-via-nginx-proxy/
## Ref: https://2buntu.com/articles/1500/creating-a-custom-maintenance-page-for-nginx/
## Ref: https://medium.com/shanes-tech-tips/easy-maintenance-mode-with-nginx-2d4d510a0980
## Ref: https://lincolnloop.com/blog/pro-tip-redirecting-custom-nginx-maintenance-page/
## Ref: https://stackoverflow.com/questions/48407874/nginx-locations-exempt-certain-location-from-maintenance-mode
## Ref: https://serverfault.com/questions/738452/what-does-the-at-sign-mean-in-nginx-location-blocks
## Ref: https://stackoverflow.com/questions/5600448/how-to-setup-custom-503-error-page-in-nginx-that-intercepts-all-requests
## Ref: https://serverfault.com/questions/325485/nginx-how-to-prevent-an-exactly-named-ssl-server-block-from-acting-as-the-catch
## Ref: https://serverfault.com/questions/496371/nested-locations-nginx
## Ref: https://stackoverflow.com/questions/37902544/nginx-sucessfully-password-protects-php-files-but-then-prompts-you-to-download
## Ref: https://jerrybanfield.com/removing-amp-wordpress/
## Ref: https://www.kevinleary.net/preventing-possible-attempt-enumerate-users-solved/
## Ref: https://stackoverflow.com/questions/40785507/nginx-rewrite-url-containing-amp-to-remove-amp-from-the-end
## Ref: https://geekflare.com/redirect-amp-page-to-non-amp/
## Ref: https://sandervolbeda.com/redirect-old-amp-url/
## Ref: https://stackoverflow.com/questions/40810219/nginx-301-redirect-with-query-string/40810818
## Ref: https://stackoverflow.com/questions/43812339/redirect-301-nginx-with-query-string-amp-amp-nginx-redirect
## Ref: https://wordpress.org/support/topic/how-to-drop-amp-and-redirect-all-amp-version-to-normal-url/
## Ref: https://stackoverflow.com/questions/48708361/nginx-request-uri-vs-uri/48709976
## Ref: https://www.linuxbabe.com/nginx/setup-nginx-fastcgi-cache
## Ref: https://github.com/letsencrypt/acme-spec/issues/221
## Ref: https://community.letsencrypt.org/t/how-to-nginx-configuration-to-enable-acme-challenge-support-on-all-http-virtual-hosts/5622/27
## Ref: https://www.cloudsigma.com/nginx-server-and-location-block-selection-algorithms-overview/
## Ref: https://www.claudiokuenzler.com/blog/1104/define-optional-sub-uri-paths-nginx-location-using-pcre-regex
## Ref: https://stackoverflow.com/questions/32964572/nginx-location-try-files-with-add-header-redirect-and-cors
## Ref: https://stackoverflow.com/questions/39129575/nginx-add-header-on-specific-uri-to-php-app-with-front-controller
## Ref: https://serverfault.com/questions/496371/how-to-use-nested-nginx-location-blocks-prefixes-vs-regex-directives
## Ref: https://github.com/openresty/headers-more-nginx-module/issues/11
## Ref: https://laracasts.com/discuss/channels/servers/having-trouble-adding-headers-to-specific-path-in-nginx
## Ref: https://www.peterbe.com/plog/be-very-careful-with-your-add_header-in-nginx
## Ref: https://onemorecupof-coffee.com/tags-categories-no-index/
## Ref: https://www.fayazmiraz.com/should-we-index-wordpress-blog-category-and-tag-pages-for-search-engine-optimization-seo/
## Ref: https://neilpatel.com/blog/deindex-your-pages/
## Ref: https://www.searchenginejournal.com/noindex-category-archive-pages/374867/#close
## Ref: https://serverfault.com/questions/1066541/nginx-location-matching-with-regex-year-month-day
## Ref: https://serverfault.com/questions/503002/nginx-simple-regex-location
## Ref: https://stackoverflow.com/questions/22745384/how-to-disable-location-in-nginx-from-bash-command-line
## Ref: https://stackoverflow.com/questions/42933438/lets-encrypt-unauthorized-403-forbidden
## Ref: https://serverfault.com/questions/578648/properly-setting-up-a-default-nginx-server-for-https/846214
## Ref: https://serverfault.com/questions/512054/globally-setting-ipv6only-off
## Ref: https://github.com/ampproject/amp-wp/issues/2204
## Ref: https://github.com/littlebizzy/slickstack/issues/130
## Ref: https://gist.github.com/sergejmueller/0e508f3a4d92fd7ec110
## Ref: https://moz.com/community/q/topic/57022/removing-css-js-files-from-index
## Ref: https://webmasters.stackexchange.com/questions/63613/should-i-set-noindex-header-for-my-js-css-and-image-files
## Ref: https://support.google.com/webmasters/answer/35287?hl=en
## Ref: https://serverfault.com/questions/658878/cloudflare-doesnt-cache-as-expected
## Ref: https://community.cloudflare.com/t/using-cache-everything-but-cf-cache-status-is-bypass/162031
## Ref: https://stackoverflow.com/questions/18148884/difference-between-no-cache-and-must-revalidate
## Ref: https://serverfault.com/questions/806391/nginx-wordpress-404-pages-all-works-but-php-files
## Ref: https://stackoverflow.com/questions/65586715/nginx-issues-when-matching-partial-location
## Ref: https://serverfault.com/questions/950857/use-include-in-nginx-server-block-but-where-to-save
## Ref: https://ashton.codes/set-cache-control-max-age-1-year/

## SS_EOF